/*=========================================================
BACCARAT - Casino Number Game

Player chooses between two sides either
'banker' or 'player'. After drawing two cards the one
who has the nearest number to 9 wins.

Whenever sum overboards to 9, 1 card will be drawn
from the deck. However if at the first two draw
results a sum of 8 and 9, the dealer won't draw
additional card anymore.

===========================================================*/

#include <iostream>
#include <ctime>
#include <string>

struct Number{
    int num1, num2, sum, extraCard;
};

// Function prototypes
void printCard1(int num1, int num2, int num3, int sum);
void printCard2(int num1, int num2, int sum);
bool playAgain(char x, int money);
int winnerFunction(int bankerCard, int playerCard); // Compares two cards
int declareWinner(int winner, int decision, int bet); // Checks if user won or lost

int main(){

    system("Color 2F"); // CLI color changer
    srand(time(NULL)); // Random number initialization

    // Variable declarations
    std::string name;
    int bet, decision, winner, prize;
    char play;
    bool logic = true;
    int money = 10000;

    std::cout << "==============================\n";
    std::cout << "To Start, please enter your name\n";

    // Name input
    std::cout << "Enter your name: ";
    getline(std::cin, name);

    std::cout << "\nGood evening, " << name << std::endl;
    std::cout << "==============================\n\n";
    std::cout << "WELCOME TO VIRTUAL BACCARAT TABLE\n";
    std::cout << "=================================\n";

    do { // Main do-while loop

        std::cout << "Current balance: PHP " << money << std::endl;
        std::cout << "1 - BANKER \n2 - PLAYER\n";
        std::cout << "Choose your bet: ";

        // Ensure input is 1 or 2
        while(!(std::cin >> decision) || (decision < 1 || decision > 2)) {
            std::cin.clear();
            std::cin.ignore(10000, '\n'); // Ignore invalid input
            std::cout << "\nChoose your bet: 1 - BANKER, 2 - PLAYER\n";
        }

        do {
            // Check if bet is within available money
            std::cout << "Place your bet, PHP: ";
            std::cin >> bet;
        } while(bet > money);

        // BANKER'S CARDS
        std::cout << "\n==============================\n";
        std::cout << "      = BANKER'S CARD =\n";
        std::cout << "==============================\n";

        // Random card generator for banker
        Number banker;
        banker.num1 = rand() % 10 + 1;
        banker.num2 = rand() % 10 + 1;
        banker.sum = (banker.num1 + banker.num2) % 10;

        // Check for natural win 8 or 9
        if(banker.sum != 9 && banker.sum != 8) {
            banker.extraCard = rand() % 10 + 1; // Third and extra card
            banker.sum = (banker.sum + banker.extraCard) % 10; // Final card sum
            printCard1(banker.num1, banker.num2, banker.extraCard, banker.sum);
        } else {
            printCard2(banker.num1, banker.num2, banker.sum); // Natural win
        }

        // PLAYER'S CARDS
        std::cout << "\n==============================\n";
        std::cout << "      = PLAYER'S CARD =\n";
        std::cout << "==============================\n";

        // Random card generator for player
        Number player;
        player.num1 = rand() % 10 + 1;
        player.num2 = rand() % 10 + 1;
        player.sum = (player.num1 + player.num2) % 10;

        // Check for natural win 8 or 9
        if(player.sum != 9 && player.sum != 8) {
            player.extraCard = rand() % 10 + 1; // Third and extra card
            player.sum = (player.sum + player.extraCard) % 10; // Final card sum
            printCard1(player.num1, player.num2, player.extraCard, player.sum);
        } else {
            printCard2(player.num1, player.num2, player.sum); // Natural win
        }

        // Determine the winner
        winner = winnerFunction(banker.sum, player.sum);

        // Calculate and award the prize
        prize = declareWinner(winner, decision, bet);
        std::cout << "PHP " << prize << std::endl;
        money += prize;
        std::cout << "Current balance: PHP " << money << "\n\n";

        // Ask the user if they want to play again
        std::cout << "PLAY AGAIN? (Y/N): ";
        std::cin >> play;
        logic = playAgain(play, money);

    } while(logic);

    return 0; // Added return statement for main
}

// Function to print three cards
void printCard1(int num1, int num2, int num3, int sum) {
    std::cout << "=======\n";
    std::cout << "|     |\n";
    std::cout << "|  " << sum << "  |\n";
    std::cout << "|     |\n";
    std::cout << "=======\n";
    std::cout << "First Card: " << num1 << "\n";
    std::cout << "Second Card: " << num2 << "\n";
    std::cout << "Extra Card: " << num3 << "\n";
}

// Function to print two cards (natural win)
void printCard2(int num1, int num2, int sum) {
    std::cout << "=======\n";
    std::cout << "|     |\n";
    std::cout << "|  " << sum << "  |\n";
    std::cout << "|     |\n";
    std::cout << "=======\n";
    std::cout << "Natural win with 8/9!\n";
    std::cout << "First Card: " << num1 << "\n";
    std::cout << "Second Card: " << num2 << "\n";
}

// Function to ask if the user wants to play again
bool playAgain(char x, int money) {
    if(money > 0) {
        if(x == 'Y' || x == 'y') {
            return true;
        } else if(x == 'N' || x == 'n') {
            std::cout << "THANK YOU FOR PLAYING!\n";
            return false;
        }
    } else {
        std::cout << "Insufficient funds!\n";
        return false;
    }
    return false; // Default return
}

// Function to determine the winner
int winnerFunction(int bankerCard, int playerCard) {
    std::cout << "\n==================================\n";
    if(bankerCard > playerCard) {
        std::cout << "\nBANKER WINS\n";
        return 1;
    } else if(bankerCard < playerCard) {
        std::cout << "\nPLAYER WINS\n";
        return 2;
    } else {
        std::cout << "\nIT'S A DRAW\n";
        return 3;
    }
}

// Function to declare the winner and calculate the prize
int declareWinner(int winner, int decision, int bet) {
    if(winner == decision) {
        std::cout << "YOU WIN!\n";
        return bet;
    } else if(winner == 3) {
        std::cout << "IT'S A TIE!\n";
        return 0;
    } else {
        std::cout << "YOU LOSE!\n";
        return -bet;
    }
}
