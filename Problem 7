Write a program to implement following operations on the circular
linked list.
a. Insert a node at the end of the linked list.
b. Insert a node before specified position.
c. Delete a first node of the linked list.
d. Delete a node after specified position.

#include <stdio.h>
#include <stdlib.h>

// Define the structure for a node in the circular linked list
struct Node {
    int data;
    struct Node* next;
};

// Insert a node at the end of the circular linked list
void insertEnd(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    struct Node* temp = *head;
    newNode->data = data;
    newNode->next = *head;

    if (*head == NULL) {
        *head = newNode;
        newNode->next = *head;
    } else {
        while (temp->next != *head) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

// Insert a node before a specified position in the circular linked list
void insertBeforePosition(struct Node** head, int data, int pos) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    struct Node* temp = *head;
    newNode->data = data;

    if (pos == 1) {  // Inserting before the first position
        while (temp->next != *head) {
            temp = temp->next;
        }
        newNode->next = *head;
        *head = newNode;
        temp->next = *head;
    } else {
        for (int i = 1; i < pos - 1 && temp->next != *head; i++) {
            temp = temp->next;
        }
        newNode->next = temp->next;
        temp->next = newNode;
    }
}

// Delete the first node of the circular linked list
void deleteFirstNode(struct Node** head) {
    if (*head == NULL) return;

    struct Node* temp = *head;

    if ((*head)->next == *head) {  // Only one node
        free(temp);
        *head = NULL;
    } else {
        struct Node* last = *head;
        while (last->next != *head) {
            last = last->next;
        }
        last->next = (*head)->next;
        *head = (*head)->next;
        free(temp);
    }
}

// Delete a node after a specified position in the circular linked list
void deleteAfterPosition(struct Node** head, int pos) {
    if (*head == NULL) return;

    struct Node* temp = *head;
    for (int i = 1; i < pos && temp->next != *head; i++) {
        temp = temp->next;
    }

    struct Node* delNode = temp->next;
    temp->next = delNode->next;
    free(delNode);
}

// Display the circular linked list
void display(struct Node* head) {
    if (head == NULL) {
        printf("List is empty\n");
        return;
    }
    
    struct Node* temp = head;
    do {
        printf("%d -> ", temp->data);
        temp = temp->next;
    } while (temp != head);
    printf("%d (head)\n", head->data); // To show the circular nature
}

// Driver program to test above functions
int main() {
    struct Node* head = NULL;

    insertEnd(&head, 10);
    insertEnd(&head, 20);
    insertEnd(&head, 30);
    insertEnd(&head, 40);
    
    printf("Circular Linked List after inserting nodes at the end:\n");
    display(head);

    insertBeforePosition(&head, 25, 3);
    printf("Circular Linked List after inserting 25 before position 3:\n");
    display(head);

    deleteFirstNode(&head);
    printf("Circular Linked List after deleting the first node:\n");
    display(head);

    deleteAfterPosition(&head, 2);
    printf("Circular Linked List after deleting node after position 2:\n");
    display(head);

    return 0;
}
